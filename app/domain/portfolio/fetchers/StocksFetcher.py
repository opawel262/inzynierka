import yfinance as yf
from typing import List, Dict, Optional
tickers = [
    "06N",
    "08N",
    "11B",
    "1AT",
    "3RG",
    "4MS",
    "AAT",
    "ABE",
    "ABS",
    "ACG",
    "ACP",
    "ACT",
    "ADV",
    "AGO",
    "AGT",
    "ALE",
    "ALG",
    "ALI",
    "ALL",
    "ALR",
    "AMB",
    "AMC",
    "ANR",
    "APE",
    "APN",
    "APR",
    "APT",
    "ARH",
    "ART",
    "ASB",
    "ASE",
    "AST",
    "ATC",
    "ATD",
    "ATG",
    "ATR",
    "ATS",
    "ATT",
    "AWM",
    "B24",
    "BBD",
    "BBT",
    "BCM",
    "BCS",
    "BCX",
    "BDX",
    "BFT",
    "BHW",
    "BIO",
    "BIP",
    "BLO",
    "BMC",
    "BMX",
    "BNP",
    "BOS",
    "BOW",
    "BRS",
    "BST",
    "CAP",
    "CAR",
    "CAV",
    "CBF",
    "CCC",
    "CCE",
    "CDL",
    "CDR",
    "CEZ",
    "CFI",
    "CIG",
    "CLC",
    "CLD",
    "CLE",
    "CLN",
    "CMP",
    "COG",
    "CPA",
    "CPD",
    "CPL",
    "CPR",
    "CPS",
    "CRI",
    "CRJ",
    "CRM",
    "CSR",
    "CTS",
    "CTX",
    "DAD",
    "DAT",
    "DBC",
    "DBE",
    "DCR",
    "DEK",
    "DEL",
    "DGA",
    "DGE",
    "DIA",
    "DIG",
    "DMG",
    "DNP",
    "DOM",
    "DTR",
    "DVL",
    "EAH",
    "EAT",
    "ECB",
    "ECH",
    "EDI",
    "EKP",
    "ELT",
    "ENA",
    "ENE",
    "ENG",
    "ENI",
    "ENP",
    "ENT",
    "EQU",
    "ERB",
    "ETL",
    "EUC",
    "EUR",
    "FAB",
    "FEE",
    "FMG",
    "FRO",
    "FSG",
    "FTE",
    "GEA",
    "GIF",
    "GIG",
    "GKI",
    "GMT",
    "GOB",
    "GOP",
    "GPP",
    "GPW",
    "GRN",
    "GRX",
    "GTC",
    "GTN",
    "HDR",
    "HEL",
    "HRP",
    "HRS",
    "HUG",
    "IBS",
    "ICE",
    "IDM",
    "IFI",
    "IMC",
    "IMP",
    "IMS",
    "INC",
    "ING",
    "INK",
    "INL",
    "INP",
    "IPE",
    "IPO",
    "ITB",
    "IZB",
    "IZO",
    "IZS",
    "JRH",
    "JSW",
    "JWW",
    "KCH",
    "KCI",
    "KER",
    "KGH",
    "KGL",
    "KGN",
    "KOM",
    "KPD",
    "KPL",
    "KRK",
    "KRU",
    "KSG",
    "KTY",
    "KVT",
    "LBT",
    "LBW",
    "LEN",
    "LES",
    "LKD",
    "LPP",
    "LRQ",
    "LSI",
    "LWB",
    "MAB",
    "MAK",
    "MBK",
    "MBR",
    "MCI",
    "MCR",
    "MDG",
    "MDI",
    "MEX",
    "MFO",
    "MGT",
    "MIL",
    "MIR",
    "MLG",
    "MLK",
    "MLS",
    "MNC",
    "MOC",
    "MOJ",
    "MOL",
    "MON",
    "MOV",
    "MRB",
    "MRC",
    "MSP",
    "MSW",
    "MSZ",
    "MUR",
    "MVP",
    "MWT",
    "MXC",
    "NCL",
    "NEU",
    "NNG",
    "NTC",
    "NTT",
    "NVA",
    "NVG",
    "NVT",
    "NWG",
    "NXG",
    "OBL",
    "ODL",
    "OND",
    "ONO",
    "OPG",
    "OPL",
    "OPM",
    "OPN",
    "OTM",
    "OTS",
    "PAS",
    "PAT",
    "PBX",
    "PCE",
    "PCF",
    "PCO",
    "PCR",
    "PCX",
    "PEN",
    "PEO",
    "PEP",
    "PGE",
    "PGM",
    "PHN",
    "PHR",
    "PJP",
    "PKN",
    "PKO",
    "PKP",
    "PLW",
    "PLZ",
    "PMP",
    "PPS",
    "PRI",
    "PRM",
    "PTG",
    "PTW",
    "PUR",
    "PWX",
    "PXM",
    "PZU",
    "QRS",
    "RAE",
    "RAF",
    "RBW",
    "RFK",
    "RLP",
    "RMK",
    "RNC",
    "RND",
    "RNK",
    "RPC",
    "RVU",
    "RWL",
    "SAN",
    "SCP",
    "SEK",
    "SEL",
    "SFG",
    "SFS",
    "SGN",
    "SHD",
    "SHO",
    "SIM",
    "SKA",
    "SKH",
    "SKL",
    "SLV",
    "SNK",
    "SNT",
    "SNW",
    "SNX",
    "SON",
    "SPH",
    "SPL",
    "SPR",
    "STF",
    "STP",
    "STX",
    "SVE",
    "SVRS",
    "SWG",
    "TAR",
    "TEN",
    "THG",
    "TLX",
    "TMR",
    "TOA",
    "TOR",
    "TPE",
    "TRI",
    "TRK",
    "TRN",
    "TRR",
    "TSG",
    "TXT",
    "UCG",
    "ULG",
    "ULM",
    "UNF",
    "UNI",
    "UNT",
    "URT",
    "VGO",
    "VIN",
    "VOT",
    "VOX",
    "VRC",
    "VRG",
    "VVD",
    "WAS",
    "WIK",
    "WLT",
    "WPL",
    "WPR",
    "WTN",
    "WWL",
    "WXF",
    "XPL",
    "XTB",
    "XTP",
    "YAN",
    "YRL",
    "ZAB",
    "ZAP",
    "ZEP",
    "ZMT",
    "ZRE",
    "ZUE",
    "ZUK",
]

class GPWFetcher:
    def __init__(self, tickers: List[str]) -> None:
        self.tickers = [ticker + ".WA" for ticker in tickers]

    def fetch(self) -> List[Dict[str, Optional[float]]]:
        results = []

        for ticker in self.tickers:
            try:
                spolka = yf.Ticker(ticker)
                info = spolka.info

                current_price = info.get("currentPrice") or info.get(
                    "regularMarketPrice"
                )
                volume = info.get("volume") or info.get("regularMarketVolume")
                market_cap = info.get("marketCap")

                hist_daily = spolka.history(period="7d", interval="1d")
                hist_hourly = spolka.history(period="7d", interval="1h")

                price_24h_ago = (
                    hist_daily["Close"].iloc[-2] if len(hist_daily) >= 2 else None
                )
                price_7d_ago = (
                    hist_daily["Close"].iloc[0] if len(hist_daily) >= 7 else None
                )
                price_1h_ago = (
                    hist_hourly["Close"].iloc[-2] if len(hist_hourly) >= 2 else None
                )

                change_1h = self._calculate_change(current_price, price_1h_ago)
                change_24h = self._calculate_change(current_price, price_24h_ago)
                change_7d = self._calculate_change(current_price, price_7d_ago)

                results.append(
                    {
                        "ticker": info.get("symbol"),
                        "name": info.get("shortName"),
                        "sector": info.get("sector"),
                        "current_price": current_price,
                        "volume": volume,
                        "market_cap": market_cap,
                        "price_1h_ago": price_1h_ago,
                        "price_24h_ago": price_24h_ago,
                        "price_7d_ago": price_7d_ago,
                        "change_1h": change_1h,
                        "change_24h": change_24h,
                        "change_7d": change_7d,
                    }
                )

            except Exception as e:
                print(f"BÅ‚Ä…d przetwarzania {ticker}: {e}")

        return results

    @staticmethod
    def _calculate_change(
        current: Optional[float], previous: Optional[float]
    ) -> Optional[float]:
        if current is not None and previous:
            return round((current - previous) / previous * 100, 2)
        return None

    def print_summary(self, data: List[Dict[str, Optional[float]]]) -> None:
        for item in data:
            print(f"\nTicker: {item['ticker']}")
            print(f"Nazwa: {item['name']}")
            print(f"Sektor: {item['sector']}")
            print(f"Aktualna cena: {item['current_price']} PLN")
            print(f"Wolumen: {item['volume']}")
            print(f"Kapitalizacja rynkowa: {item['market_cap']} PLN")
            print(
                f"Cena 1h temu: {item['price_1h_ago']} PLN, zmiana: {item['change_1h']}%"
            )
            print(
                f"ðŸ“… Cena 24h temu: {item['price_24h_ago']} PLN, zmiana: {item['change_24h']}%"
            )
            print(
                f"Cena 7 dni temu: {item['price_7d_ago']} PLN, zmiana: {item['change_7d']}%"
            )
